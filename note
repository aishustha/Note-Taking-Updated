
//JSON- javascript object notation
//Used to exchange data between web browser, clients and server

//adding localStorageAPI to persist data
//localStorage() API lets us add the functionality to save all the tasks that the user adds to the list
//localStorage API allows you to access a storage object that is the stored data saved across browser sessions.

//JSON.parse() - takes JSON string and transforms it into a javascript object.
//var json = '{"id": 1}';
//var obj = JSON.parse(json);
//console.log(obj.id);   // Outputs: 1

//JSON stringify() - Converts a javascript value to a serialized JSON String
//takes  a javascript object and transforms it into a string
//var obj = {id: 1}
//var json = JSON.stringify(obj);
//console.log(json);   
    //Expected output: {"id":1}


// const ALL_TASKS = [
//     { id: 1, name: 'Buy a book', amount: 20},
//     { id: 2, name: 'Buy a milk', amount: 5},
//     { id: 3, name: 'Book a flight ticket', amount: 225}
// ]

//useEffect- handle lifecycle methods directly inside functional components
//using localStorage.setItem()- to store

//https://www.code-boost.com/react-local-storage/
//https://blog.crowdbotics.com/build-a-react-app-with-localstorage-api-and-hooks/
//https://www.robinwieruch.de/local-storage-react

Synchronous: A synchronous request blocks the client until operation completes. 
In such case, javascript engine of the browser is blocked.

Asynchronous An asynchronous request doesnâ€™t block the client i.e. browser is responsive. 
At time, user can perform another operations also. 
In such case, javascript engine of the browser is not blocked.


//API Routes

export default async(req, res) => {
  const data = {
    title: 'This is a title',
    text: 'Hello World'
  }

  res.statusCode = 200
  res.json({data})
}



//index.js
export default function Home({data}) {
  return (
    <Layout>
      <Tasks/>

      <div>
          <h1>{data.title}</h1>
          <p>{data.text}</p>
      </div>
    </Layout>
  )
}


export async function getStaticProps() {
  const request = await fetch('http://localhost:3000/api/hello')
  const json = await request.json()

  return {
    props: {
      data: json.data
    }
  }
}




// import comments from './comments.json'

// export default (req, res) => {
//   res.statusCode = 200
//   res.json({ comments})
// }


//pages/api/post/[pid].js
//`Post: ${pid}`
//`Post: abc`
//page/api/pos/[...slug].js
//`Post: ${slug.join(',')}`


// export default function handler(req, res) {
//   const {
//     query: {pid},

//   } = req

//   res.end(`Post: ${pid}`)
// }
 
// export default function handler(req, res) {
//   const {
//     query: {pid},

//   } = req

//   res.end(`Post: pid`)
// }
 

// export default function handler(req, res) {
//   const {
//     query: {slug},

//   } = req

//   res.end(`Post: ${slug.join(',')}`)
// }
 

// `pages/api/post/create.js` - match  `/api/post/create`
// `pages/api/post/[pid].js` - match  `/api/post/1` also `/api/post/abc`
// `pages/api/post/[...slug].js` - match `/api/post/1/2`, `/api/post/a/b/c`


//CORS - Cross origin resource sharing- An Http-header based mechanism - allows a server to indicate
//any other origins that its own from which a browser should permit loading of resources